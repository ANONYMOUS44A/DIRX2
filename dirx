#!/bin/bash

clear

# Install Apache if not already installed
if ! command -v apache2 &>/dev/null; then
    echo "[i] Installing apache2..."
    if [[ "$(uname -o 2>/dev/null)" == "Android" ]]; then
        pkg install apache2 -y
    elif [ "$(uname)" == "Linux" ]; then
        sudo apt-get update
        sudo apt-get install -y apache2
    elif [ "$(uname)" == "Darwin" ]; then
        brew install apache2
    else
        echo "System not supported!"
        exit 1
    fi
fi

# Copy the directory brute force script
if [[ "$(uname -o 2>/dev/null)" != "Android" && "$(uname)" == "Linux" ]]; then
    sudo cp dirx /bin/
fi

# Create directory for wordlist if it doesn't exist
if [ ! -d /usr/share/ ]; then
    sudo mkdir -p /usr/share/
    sudo cp wordlist.txt /usr/share/
fi

clear

trap 'echo -e "\n{>=============================================<}\n                      DONE.\n{>=============================================<}"; exit' INT

clear

function find_directories() {
    local url=$1
    local wordlist_file=$2

    while IFS= read -r directory; do
        target_url="$url/$directory/"
        response=$(curl -s -o /dev/null -w "%{http_code}" "$target_url")

        if [[ "$found_only" == true ]]; then
            if [[ "$response" == "200" ]]; then
                echo -e "[+] [ \e[42mFound\e[0m ]: /$directory/ (+)> [\e[32;1m200\e[0m]"
                echo -e " ╘═URL => $target_url "
            fi
        else
            case $response in
                200)
                    echo -e "[+] [ \e[42mFound\e[0m ]: /$directory/ (+)> [\e[32m200\e[0m]"
                    echo -e " ╘═URL => $target_url "
                    ;;
                403)
                    echo -e "[+] [ \e[36mForbidden\e[0m ]: /$directory/ (-)> 403"
                    echo " ╘═URL => $target_url "
                    ;;
                404)
                    echo -e "[+] [ \e[41mNot Found\e[0m ]: /$directory/ (-)> 404"
                    echo " ╘═URL => $target_url "
                    ;;
                *)
                    echo -e "[-] [ \e[37mUnexpected Status Code\e[0m ]: /$directory/ (?)> $response"
                    echo " ╘═URL => $target_url "
                    ;;
            esac
        fi
    done < "$wordlist_file"
}

# Read command line arguments
while getopts 'u:w:fv' flag; do
    case "${flag}" in
        u) target_url="${OPTARG}" ;;
        w) wordlist_path="${OPTARG}" ;;
        f) found_only=true ;;
        v) version="2.2" && echo "Version: $version" && exit ;;
        *) echo "Invalid option: ${flag}" ;;
    esac
done

# Check if required options are provided
if [[ -z "$target_url" || -z "$wordlist_path" ]]; then
    clear
    echo
    echo -e "[\033[45;1m DIRX ~ RAPS \e[0m]"
    echo "Developed by Trabbit"
    echo "----------------------"
    echo -e "Usage: ./dirx -u <\033[38;5;202mtarget_url\e[0m> -w <\033[38;5;202mwordlist_path\e[0m> [\e[36m-f\e[0m] [\e[36m-v\e[0m]"
    echo "------------------------------------------------"
    echo " -u (URL)"
    echo " -w (Wordlist file/path)"
    echo " -f (Show only found directories)"
    echo " -v (Print version)"
    echo "------------------------------------------------"
    echo "Examples:"
    echo " dirx -u https://example.com -w wordlist.txt"
    echo " dirx -u https://example.com -w wordlist.txt -f"
    echo " dirx -v"
    echo
    echo
    exit 1
fi

# User feedback with ASCII art
echo -e "\n            ####__   ___/ /___                      "
echo -e "            ######} |** \\ \\  |\\_                    "
echo -e "             ######}„_@_ //_@_  |<{//////////       "
echo -e "|¯¯¯¯|\\¯¯¯\\‚|¯¯¯¯¯¯¯¯¯|/|¯¯¯¯|\\¯¯¯\\’|¯¯¯¯’|/¯¯¯¯/"
echo -e "|    |'|   ||__/| |\\__|‚|    | |   ||__        / "
echo -e "|    |'|   ||¯¯\\| |/¯¯|‚|    |/   /  /       ¯¯| "
echo -e "|____|/___/‚|_________|'|____|\\___\\’/____/|____| "
echo -e "                                        \033[38;5;202mTRABBIT\e[0m  "
echo -e "{>=============================================<}"
echo -e "| [+] TARGET => $target_url [\e[36m-u\e[0m]                 "
echo -e "| [+] WORDLIST => $wordlist_filename [\e[36m-w\e[0m]       "
echo -e "{>=============================================<}"
if [[ "$found_only" == true ]]; then
    echo -e "| [+] SHOW ONLY FOUND DIRECTORIES [\e[36m-f\e[0m]"
fi
echo -e "{>=============================================<}"
echo -e " \033[45;1m      \\\\\ DIRECTORY BRUTEFORCE STARTED \\\\\       \e[0m"
echo -e "{>=============================================<}\n"

# Execute directory brute force
find_directories "$target_url" "$wordlist_path"

# User feedback
echo -e "{>=============================================<}"
if [[ "$found_only" == true ]]; then
    echo -e "                DONE (FOUND ONLY).                      "
else
    echo -e "                      DONE.                      "
fi
echo -e "{>=============================================<}"
